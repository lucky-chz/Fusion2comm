name: dair_where2comm_attn_multiscale_resnet
data_dir: "/space/chuhz/datasets/DAIR-V2X/DAIR-V2X-C/cooperative-vehicle-infrastructure"
root_dir: "/space/chuhz/datasets/DAIR-V2X/DAIR-V2X-C/cooperative-vehicle-infrastructure/train.json"
validate_dir: "/space/chuhz/datasets/DAIR-V2X/DAIR-V2X-C/cooperative-vehicle-infrastructure/val.json"
test_dir: "/space/chuhz/datasets/DAIR-V2X/DAIR-V2X-C/cooperative-vehicle-infrastructure/val.json"
save_dir: "/space0/chuhz/output/spvcnn_split/"
noise_setting:
  add_noise: False
  args: 
    pos_std: 0.2
    rot_std: 0.2
    pos_mean: 0
    rot_mean: 0

# comm_range: 100
input_source: ['lidar', "camera"]

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 2
  epoches: 30
  eval_freq: 2
  save_freq: 2
  max_cav: &max_cav 2


fusion:
  core_method: 'IntermediateFusionDatasetDAIR_Lidar_Occlusion_SPVCNN' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  args:
    proj_first: false
    clip_pc: false

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
    num_point_features: 7
  # lidar range for each individual cav. Format: xyzxyz minmax
  cav_lidar_range: &cav_lidar [-100.8, -40, -3, 100.8, 40, 1]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 4.5
    w: 2
    h: 1.56
    r: [0, 90]
    feature_stride: 2
    num: &achor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.2
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

# model related
model:
  core_method: spvcnn_res_split_where2comm
  
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *achor_num
    max_cav: *max_cav
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
    num_point_features: 280 # 4 + 64*4 + 20 
    compression: 0 # compression rate
    backbone_fix: false

    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64
    spvcnn:
      model_params:
        model_architecture: "arch_2dpass_clip_inst_text"
        context_length: 256
        input_dims: 4
        spatial_shape:
          - 1000
          - 1000
          - 60
        scale_list:
          - 2
          - 4
          - 8
          - 16

        hiden_size: 64
        num_classes: 20
        backbone_2d: RN50 # resnet34
        pretrained2d: False
        window_size: [25, 25, 15]
        swin_iter: 1
        swin_num_heads: 2
        swin_max_token: 120
        pos_temperature: 800
        with_pos_emb: True
        text_input_dims: 8832 # 35328 # 69*768
      
      ###################
      ## Dataset options
      dataset_params:
        training_size: 43554 # 23203 # 19132
        dataset_type: "point_image_dataset_semkitti_aug_withimgv21_instance_text"
        pc_dataset_type: "SemanticKITTIAugInstText"
        collate_type: "collate_fn_instance_text"
        ignore_label: 0
        label_mapping: "/space/liuhz/project/twoStageSeg/ClusterSeg/config/label_mapping/semantic-kitti.yaml"
        voxellization_type: "cat"
        road_config:
          enable: True
        instance_text_base_path: "/space/liuhz/project/twoStageSeg/Image2Paragraph-main/output/semanticKITTI/instance_with_context_text"
        trainval: True
        # 2D augmentation
        bottom_crop:
          - 480
          - 320
        color_jitter:
          - 0.4
          - 0.4
          - 0.4
        flip2d: 0.5
        image_normalizer:
          - [0.48145466, 0.45782750, 0.40821073] # [0.485, 0.456, 0.406]
          - [0.26862954, 0.26130258, 0.27577711] # [0.229, 0.224, 0.225]
        max_volume_space:
          - 100.8
          - 40
          - 1
        min_volume_space:
          - -100.8
          - -40
          - -3
        max_cylinder_space:
          - 82
          - 3.1415928
          - 2
        min_cylinder_space:
          - 0
          - -3.1415928
          - -4
        seg_labelweights:
          - 0                # "unlabeled", and others ignored 0
          - 240942562        # "road" 1
          - 17294618         # "parking" 2
          - 3274484          # "other-vehicle" 3
          - 170599734        # "sidewalk" 4
          - 6369672          # "other-ground" 5
          - 230413074        # "building" 6
          - 1168181          # "traffic-sign" 7
          - 101130274        # "fence" 8
          - 476491114        # "vegetation" 9
          - 9833174          # "trunk" 10
          - 552662           # "person" 11
          - 78858            # "motorcyclist" 12
          - 55437630         # "car" 13
          - 2578735          # "truck" 14
          - 3274484          # "other-vehicle" 15
          - 129609852        # "terrain" 16
          - 4506626          # "pole" 17
          - 184064           # "bicyclist" 18
          - 862533           # "bicycle" + "motorcycle" 19  320797 + 541736
      train_params:
        trainval: True
        withtest: True
        max_num_epochs: 64
        learning_rate: 0.24 # 0.24
        optimizer: SGD  # [SGD, Adam]
        lr_scheduler: CosineAnnealingWarmRestarts  # [StepLR, ReduceLROnPlateau, CosineAnnealingLR, CosineAnnealingWarmRestarts]
        momentum: 0.9
        nesterov: True
        weight_decay: 1.0e-4
        lambda_lovasz: 2.0
        lambda_seg2d: 1
        lambda_segtext: 1
        lambda_xm: 0.05
        lambda_text_xm: 0.05
        geo_loss: False
        lambda_geo: 2
        geo_k: 10
        xm:
          num_heads: 4

    base_bev_backbone:
      resnet: true
      layer_nums: &layer_nums [3, 4, 5]
      layer_strides: [2, 2, 2]
      num_filters: &num_filters [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]
      compression: 0
      voxel_size: *voxel_size
    shrink_header:
      kernal_size: [ 3 ]
      stride: [ 1 ]
      padding: [ 1 ]
      dim: [ 256 ]
      input_dim: 384 # 128 * 3
    
    # dcn:
    #   in_channels: [384]
    #   out_channels: [256]
    #   stride: [1]
    #   padding: [1]
    #   kernel_size : [3]
    #   n_blocks: 1

    fusion_args:
      voxel_size: *voxel_size
      downsample_rate: 1
      in_channels: 256
      n_head: 8
      dropout_rate: 0
      only_attention: true
      # communication:
      #   thre: 0.01
      #   gaussian_smooth:
      #     k_size: 5
      #     c_sigma: 1.0
      agg_operator:
        mode: 'ATTEN'
        feature_dim: 256
      multi_scale: true
      layer_nums: *layer_nums
      num_filters: *num_filters


loss:
  core_method: point_pillar_loss
  args:
    cls_weight: 1.0
    reg: 2.0

optimizer:
  core_method: Adam
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 20]

